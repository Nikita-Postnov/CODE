import tkinter as tk
from tkinter import ttk, scrolledtext, filedialog, messagebox, Menu
from spellchecker import SpellChecker
import os
import sys
import ctypes
import re
from functools import partial
import logging
from datetime import datetime
import importlib.util
import inspect
from pathlib import Path
from tkinter import messagebox

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
LOG_DIR = os.path.join(BASE_DIR, "logs")
DICTIONARY_DIR = os.path.join(BASE_DIR, "dictionary")
CUSTOM_DICTIONARY_FILE = os.path.join(
    DICTIONARY_DIR, "Personal_Dictionary.txt")
APP_VERSION = "1.0.0"

if not os.path.exists(LOG_DIR):
    try:
        os.makedirs(LOG_DIR)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤: {LOG_DIR}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –ª–æ–≥–æ–≤: {str(e)}")
        LOG_DIR = BASE_DIR
        print(f"‚ö†Ô∏è –õ–æ–≥–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤: {LOG_DIR}")

if not os.path.exists(DICTIONARY_DIR):
    try:
        os.makedirs(DICTIONARY_DIR)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Å–ª–æ–≤–∞—Ä—è: {DICTIONARY_DIR}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ —Å–ª–æ–≤–∞—Ä—è: {str(e)}")
        DICTIONARY_DIR = BASE_DIR
        CUSTOM_DICTIONARY_FILE = os.path.join(
            BASE_DIR, "Personal_Dictionary.txt")
        print(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–æ–≤–∞—Ä—è –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {CUSTOM_DICTIONARY_FILE}")

log_file = os.path.join(
    LOG_DIR, f"hotkeys_log_{datetime.now().strftime('%Y-%m-%d')}.log")
logging.basicConfig(
    filename=log_file,
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

class Plugin:
    def __init__(self, app):
        self.app = app

    def register(self):
        pass

class PluginManager:
    def __init__(self, app):
        self.app = app
        self.plugins = []
        self.plugins_dir = os.path.abspath(os.path.join(BASE_DIR, "plugins"))
        self.run_diagnostics()
        self.load_plugins()

    def load_plugins(self):
        print("\n" + "="*40 + " –ó–ê–ì–†–£–ó–ö–ê –ü–õ–ê–ì–ò–ù–û–í " + "="*40)

        try:
            if not os.path.exists(self.plugins_dir):
                os.makedirs(self.plugins_dir)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø–ª–∞–≥–∏–Ω–æ–≤: {self.plugins_dir}")
                return

            plugin_files = [f for f in os.listdir(self.plugins_dir)
                            if f.endswith('.py') and f != '__init__.py']

            print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø–ª–∞–≥–∏–Ω–æ–≤: {len(plugin_files)}")

            for file_name in plugin_files:
                module_name = file_name[:-3]
                module_path = os.path.join(self.plugins_dir, file_name)
                print(f"\nüîå –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–≥–∏–Ω–∞: {file_name}")

                try:
                    spec = importlib.util.spec_from_file_location(module_name, module_path)
                    module = importlib.util.module_from_spec(spec)
                    spec.loader.exec_module(module)

                    print(f"–ö–ª–∞—Å—Å—ã –≤ –º–æ–¥—É–ª–µ {module_name}:")
                    for name, obj in inspect.getmembers(module):
                        if inspect.isclass(obj):
                            print(f" - {name} (—Ä–æ–¥–∏—Ç–µ–ª—å: {obj.__bases__})")

                    for name, obj in inspect.getmembers(module):
                        if (inspect.isclass(obj)
                            and issubclass(obj, Plugin)
                            and obj != Plugin):
                            try:
                                plugin = obj(self.app)
                                plugin.register()
                                self.plugins.append(plugin)
                                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {obj.__name__}")
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞ {name}: {str(e)}")
                                import traceback
                                traceback.print_exc()

                except Exception as e:
                    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_name}:")
                    import traceback
                    traceback.print_exc()

            print(f"\n–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–ª–∞–≥–∏–Ω–æ–≤: {len(self.plugins)}")
            print("="*90)

        except Exception as e:
            print(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            import traceback
            traceback.print_exc()

    def run_diagnostics(self):
        print("\n" + "="*40 + " –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–õ–ê–ì–ò–ù–û–í " + "="*40)
        self._check_folder_permissions()
        self._print_environment_info()
        self._list_plugin_files()
        print("="*100 + "\n")

    def _check_folder_permissions(self):
        print(f"üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞:")
        print(f"–ü—É—Ç—å: {self.plugins_dir}")

    checks = {
        '–°—É—â–µ—Å—Ç–≤—É–µ—Ç': os.path.exists,
        '–≠—Ç–æ –ø–∞–ø–∫–∞': os.path.isdir,
        '–î–æ—Å—Ç—É–ø –Ω–∞ —á—Ç–µ–Ω–∏–µ': os.R_OK,
        '–î–æ—Å—Ç—É–ø –Ω–∞ –∑–∞–ø–∏—Å—å': os.W_OK 
    }

    for check_name, check_func in checks.items():
        try:
            if isinstance(check_func, int):
                result = os.access(self.plugins_dir, check_func)
            else:
                result = check_func(self.plugins_dir)

            status = "‚úÖ" if result else "‚ùå"
            print(f"{status} {check_name}: {result}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {check_name}: {str(e)}")

    def _print_environment_info(self):
        print("\nüåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–µ–¥–µ:")
        print(f"Python: {sys.version}")
        print(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
        print(f"–ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: {sys.getfilesystemencoding()}")

    def _list_plugin_files(self):
        print("\nüìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ –ø–ª–∞–≥–∏–Ω–æ–≤:")
        try:
            files = list(Path(self.plugins_dir).glob('*'))
            if not files:
                print("‚õî –ü–∞–ø–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤ –ø—É—Å—Ç–∞")
                return

            for f in files:
                icon = "üìÑ" if f.is_file() else "üìÅ"
                print(f"{icon} {f.name:<20} | –†–∞–∑–º–µ—Ä: {f.stat().st_size/1024:.1f} KB | –°–æ–∑–¥–∞–Ω: {datetime.fromtimestamp(f.stat().st_ctime):%Y-%m-%d %H:%M}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏: {str(e)}")

    def get_plugins_info(self):
        info = []
        for plugin in self.plugins:
            plugin_info = {
                "–ò–º—è": plugin.__class__.__name__,
                "–í–µ—Ä—Å–∏—è": getattr(plugin, 'version', '0.0.1'),
                "–ê–≤—Ç–æ—Ä": getattr(plugin, 'author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                "–û–ø–∏—Å–∞–Ω–∏–µ": getattr(plugin, 'description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
            }
            info.append(plugin_info)
        return info

class CustomDictionary:
    def __init__(self, spellchecker):
        self.spellchecker = spellchecker
        self.words = set()
        self.create_dictionary_file()
        self.load()

    def create_dictionary_file(self):
        try:
            if not os.path.exists(CUSTOM_DICTIONARY_FILE):
                print(
                    f"–°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–ª–æ–≤–∞—Ä—è –ø–æ –ø—É—Ç–∏: {os.path.abspath(CUSTOM_DICTIONARY_FILE)}")
                with open(CUSTOM_DICTIONARY_FILE, "w", encoding="utf-8") as file:
                    pass
                if os.path.exists(CUSTOM_DICTIONARY_FILE):
                    print(
                        f"‚úÖ –§–∞–π–ª —Å–ª–æ–≤–∞—Ä—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {CUSTOM_DICTIONARY_FILE}")
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å–ª–æ–≤–∞—Ä—è")
                    self.try_alternative_location()
            else:
                print(
                    f"‚úÖ –§–∞–π–ª —Å–ª–æ–≤–∞—Ä—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {CUSTOM_DICTIONARY_FILE}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–ª–æ–≤–∞—Ä—è: {str(e)}")
            self.try_alternative_location()

    def try_alternative_location(self):
        global CUSTOM_DICTIONARY_FILE
        try:
            home_dir = os.path.expanduser("~")
            alt_file = os.path.join(home_dir, "Personal_Dictionary.txt")
            print(
                f"–ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å–ª–æ–≤–∞—Ä—è –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–µ—Å—Ç–µ: {alt_file}")
            with open(alt_file, "w", encoding="utf-8") as file:
                pass
            if os.path.exists(alt_file):
                CUSTOM_DICTIONARY_FILE = alt_file
                print(
                    f"‚úÖ –§–∞–π–ª —Å–ª–æ–≤–∞—Ä—è —Å–æ–∑–¥–∞–Ω –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–µ—Å—Ç–µ: {CUSTOM_DICTIONARY_FILE}")
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                                    f"–§–∞–π–ª —Å–ª–æ–≤–∞—Ä—è —Å–æ–∑–¥–∞–Ω –≤ –≤–∞—à–µ–π –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:\n{CUSTOM_DICTIONARY_FILE}")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å–ª–æ–≤–∞—Ä—è –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–µ—Å—Ç–µ")
        except Exception as e:
            print(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–µ—Å—Ç–µ: {str(e)}")

    def load(self):
        try:
            if os.path.exists(CUSTOM_DICTIONARY_FILE):
                with open(CUSTOM_DICTIONARY_FILE, "r", encoding="utf-8") as file:
                    self.words = {line.strip()
                                  for line in file if line.strip()}
                if self.words:
                    self.refresh_spellchecker()
                    print(
                        f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.words)} —Å–ª–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä—è: {CUSTOM_DICTIONARY_FILE}")
                else:
                    print(
                        f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–æ–≤–∞—Ä—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—É—Å—Ç: {CUSTOM_DICTIONARY_FILE}")
            else:
                print(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–æ–≤–∞—Ä—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {CUSTOM_DICTIONARY_FILE}")
                self.create_dictionary_file()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤–∞—Ä—è: {str(e)}")

    def clear(self):
        self.words.clear()
        try:
            with open(CUSTOM_DICTIONARY_FILE, "w", encoding="utf-8") as file:
                pass
            self.refresh_spellchecker()
            print(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –æ—á–∏—â–µ–Ω: {CUSTOM_DICTIONARY_FILE}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ª–æ–≤–∞—Ä—è: {str(e)}")
            messagebox.showerror(
                "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å:\n{str(e)}")
            return False

    def add(self, word):
        if not word:
            print("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            return False

        word = word.lower().strip()
        if word in self.words:
            print(f"‚ö†Ô∏è –°–ª–æ–≤–æ '{word}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ")
            return False

        self.words.add(word)
        try:
            if not os.path.exists(CUSTOM_DICTIONARY_FILE):
                self.create_dictionary_file()

            with open(CUSTOM_DICTIONARY_FILE, "a", encoding="utf-8") as file:
                file.write(word + "\n")

            self.refresh_spellchecker()
            print(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤–æ: '{word}' –≤ —Ñ–∞–π–ª {CUSTOM_DICTIONARY_FILE}")
            return True
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ '{word}': {str(e)}"
            print(error_msg)
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
            return False

    def save(self):
        try:
            if not os.path.exists(CUSTOM_DICTIONARY_FILE):
                self.create_dictionary_file()

            with open(CUSTOM_DICTIONARY_FILE, "w", encoding="utf-8") as file:
                for word in sorted(self.words):
                    file.write(word + "\n")
            print(
                f"‚úÖ –°–ª–æ–≤–∞—Ä—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {len(self.words)} —Å–ª–æ–≤/–∞/–æ –≤ —Ñ–∞–π–ª {CUSTOM_DICTIONARY_FILE}")
            return True
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è: {str(e)}"
            print(error_msg)
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
            return False

    def refresh_spellchecker(self):
        try:
            self.spellchecker.word_frequency.load_words(self.words)
            print(f"üîÑ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –æ–±–Ω–æ–≤–ª—ë–Ω: {len(self.words)} —Å–ª–æ–≤")
        except Exception as e:
            print(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è: {str(e)}")

    def remove(self, word):
        if not word:
            print("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ")
            return False

        word = word.lower().strip()
        if word not in self.words:
            print(f"‚ö†Ô∏è –°–ª–æ–≤–æ '{word}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ")
            return False

        self.words.remove(word)
        try:
            if not os.path.exists(CUSTOM_DICTIONARY_FILE):
                self.create_dictionary_file()

            self.save()

            self.refresh_spellchecker()
            print(
                f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–ª–æ–≤–æ: '{word}' –∏–∑ —Ñ–∞–π–ª–∞ {CUSTOM_DICTIONARY_FILE}")
            return True
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ '{word}': {str(e)}"
            print(error_msg)
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
            return False

class SpellCheckerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏")
        self.root.geometry("850x600")
        self.plugin_manager = PluginManager(self)
        self.restoring_state = False
        self.root.configure(bg="#f4f4f4")

        self.debug_console = True
        self.history = []
        self.history_index = -1
        self.punctuation_errors = []

        self.spell = SpellChecker(language='ru')
        self.dictionary = CustomDictionary(self.spell)
        self.setup_ui()
        self.setup_menu()
        self.setup_history()
        self.entry.focus_set()

        self.setup_punctuation_rules()

        if self.debug_console and sys.platform == "win32":
            ctypes.windll.kernel32.AllocConsole()
            sys.stdout = open("CONOUT$", "w", encoding="utf-8")

    def check_spelling(self):
        self.highlight_errors()
        self.check_punctuation()

        text = self.entry.get("1.0", tk.END)
        words = re.findall(r'\b\w+\b', text)
        errors = list(self.spell.unknown(words))

        punctuation_errors = len(self.punctuation_errors)

        total_words = len(words)
        error_percent = (len(errors) / total_words * 100) if total_words > 0 else 0

        report = (f"–ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(errors)}\n"
                  f"–û—à–∏–±–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏: {punctuation_errors}\n"
                  f"–ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: {error_percent:.1f}%")

        self.update_result(report, "red" if errors else "green")
        self.status_bar.config(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def save_file(self):
        file_path = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")])
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as file:
                    file.write(self.entry.get("1.0", tk.END))
                self.update_result("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", "green")
            except Exception as e:
                self.update_result(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}", "red")

    def open_file(self):
        file_path = filedialog.askopenfilename(
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")])
        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    self.entry.delete("1.0", tk.END)
                    self.entry.insert(tk.END, file.read())
                self.update_result("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!", "green")
            except Exception as e:
                self.update_result(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}", "red")

    def new_file(self):
        self.entry.delete("1.0", tk.END)
        self.update_result("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª.", "blue")

    def show_about(self):
        about_text = (
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏\n\n"
            f"–í–µ—Ä—Å–∏—è: {APP_VERSION}\n"
            "–ê–≤—Ç–æ—Ä: –ù–∏–∫–∏—Ç–∞ –ü–æ—Å—Ç–Ω–æ–≤\n"
            "–õ–∏—Ü–µ–Ω–∑–∏—è: Community\n"
            "GitHub: https://github.com/Nikita-Postnov"
        )

        messagebox.showinfo(
            "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            about_text,
            icon=messagebox.INFO
        )

    def add_word_dialog(self):
        dialog = tk.Toplevel(self.root)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ")
        dialog.geometry("300x100")

        tk.Label(dialog, text="–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ:").pack(pady=5)
        entry = tk.Entry(dialog)
        entry.pack(pady=5)

        def add_and_close():
            word = entry.get().strip()
            if word:
                if self.dictionary.add(word):
                    self.highlight_errors()
                    dialog.destroy()
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ")

        btn_frame = tk.Frame(dialog)
        btn_frame.pack(pady=5)

        ttk.Button(btn_frame, text="–î–æ–±–∞–≤–∏—Ç—å", command=add_and_close).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).pack(side=tk.RIGHT, padx=5)

    def remove_word_dialog(self):
        dialog = tk.Toplevel(self.root)
        dialog.title("–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ")
        dialog.geometry("300x100")

        tk.Label(dialog, text="–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ:").pack(pady=5)
        entry = tk.Entry(dialog)
        entry.pack(pady=5)

        def remove_and_close():
            word = entry.get().strip()
            if word:
                if self.dictionary.remove(word):
                    self.highlight_errors()
                    dialog.destroy()
                    self.check_spelling()
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ")

        btn_frame = tk.Frame(dialog)
        btn_frame.pack(pady=5)

        ttk.Button(btn_frame, text="–£–¥–∞–ª–∏—Ç—å", command=remove_and_close).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).pack(side=tk.RIGHT, padx=5)

    def show_plugins_manager(self):
        plugins_window = tk.Toplevel(self.root)
        plugins_window.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞–º–∏")
        plugins_window.geometry("600x400")

        listbox = tk.Listbox(plugins_window)
        listbox.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        for plugin in self.plugin_manager.plugins:
            listbox.insert(tk.END, f"‚Ä¢ {plugin.__class__.__name__}")

        status_label = tk.Label(
            plugins_window,
            text=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–ª–∞–≥–∏–Ω–æ–≤: {len(self.plugin_manager.plugins)}",
            relief=tk.SUNKEN
        )
        status_label.pack(fill=tk.X, side=tk.BOTTOM)

    def setup_history(self):
        self.save_state()
        self.entry.bind("<<Modified>>", self.on_text_modified)

    def on_text_modified(self, event):
        if self.entry.edit_modified():
            if not self.restoring_state:
                self.save_state()
            self.entry.edit_modified(False)

    def save_state(self):
        current_text = self.entry.get("1.0", tk.END)
        if self.history_index < len(self.history)-1:
            self.history = self.history[:self.history_index+1]
        self.history.append(current_text)
        self.history_index = len(self.history)-1

    def undo(self, event=None):
        if self.history_index > 0:
            self.history_index -= 1
            self.restore_state()
        return "break"

    def redo(self, event=None):
        if self.history_index < len(self.history)-1:
            self.history_index += 1
            self.restore_state()
        return "break"

    def restore_state(self):
        self.restoring_state = True
        self.entry.delete("1.0", tk.END)
        self.entry.insert("1.0", self.history[self.history_index])
        self.highlight_errors()
        self.check_punctuation()
        self.entry.edit_modified(False)
        self.restoring_state = False

    def setup_punctuation_rules(self):
        self.rules = [
            (r'(?<!\s)([.,:;!?])', "–ü—Ä–æ–ø—É—â–µ–Ω –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–æ–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è"),
            (r'([.,:;!?])(?!\s|$)', "–ü—Ä–æ–ø—É—â–µ–Ω –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è"),
            (r'\s([.,:;!?])', "–õ–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–æ–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è"),
            (r'([–∞-—è–ê-–Ø])([A-Za-z])', "–°–º–µ—à–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤"),
            (r'\b\s{2,}\b', "–î–≤–æ–π–Ω–æ–π –ø—Ä–æ–±–µ–ª")
        ]

    def check_punctuation(self, event=None):
        self.entry.tag_remove("punctuation", "1.0", tk.END)
        self.punctuation_errors.clear()
        text = self.entry.get("1.0", tk.END)

        for pattern, message in self.rules:
            for match in re.finditer(pattern, text):
                start = match.start()
                end = match.end()
                self.entry.tag_add("punctuation",
                                   f"1.0+{start}c",
                                   f"1.0+{end}c")
                self.punctuation_errors.append({
                    'start': start,
                    'end': end,
                    'message': message
                })

        self.entry.tag_config("punctuation",
                              underline=True,
                              foreground="orange")

    def setup_menu(self):
        self.menu = tk.Menu(self.root, tearoff=0)
        self.root.config(menu=self.menu)

        main_menu = tk.Menu(self.menu, tearoff=0)
        self.menu.add_cascade(label="–ú–µ–Ω—é", menu=main_menu)
        main_menu.add_command(label="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é", command=self.check_spelling)
        main_menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç", command=self.clear_text)
        main_menu.add_separator()
        main_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)

        dict_menu = tk.Menu(self.menu, tearoff=0)
        self.menu.add_cascade(label="–°–ª–æ–≤–∞—Ä—å", menu=dict_menu)
        dict_menu.add_command(label="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å", command=self.show_dictionary)
        dict_menu.add_command(label="–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", command=self.add_word_dialog)
        dict_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", command=self.remove_word_dialog)

        plugin_menu = tk.Menu(self.menu, tearoff=0)
        self.menu.add_cascade(label="–ü–ª–∞–≥–∏–Ω—ã", menu=plugin_menu)
        plugin_menu.add_command(label="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞–º–∏", command=self.show_plugins_manager)
        plugin_menu.add_command(label="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", command=self.show_plugins_diagnostics)
        
        help_menu = tk.Menu(self.menu, tearoff=0)
        self.menu.add_cascade(label="–°–ø—Ä–∞–≤–∫–∞", menu=help_menu)
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about)

    def show_plugins_diagnostics(self):
        diag_window = tk.Toplevel(self.root)
        diag_window.title("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤")
        
        text = tk.Text(diag_window, wrap=tk.WORD, width=80, height=20)
        scroll = tk.Scrollbar(diag_window, command=text.yview)
        text.configure(yscrollcommand=scroll.set)
        
        scroll.pack(side=tk.RIGHT, fill=tk.Y)
        text.pack(fill=tk.BOTH, expand=True)

        info = [
            f"–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {APP_VERSION}",
            f"Python: {sys.version.split()[0]}",
            f"–ü—É—Ç—å –∫ –ø–ª–∞–≥–∏–Ω–∞–º: {self.plugin_manager.plugins_dir}",
            "\n–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã:"
        ]
        
        for p in self.plugin_manager.get_plugins_info():
            info.append(
                f"‚Ä¢ {p['–ò–º—è']} v{p['–í–µ—Ä—Å–∏—è']}\n"
                f"   –ê–≤—Ç–æ—Ä: {p['–ê–≤—Ç–æ—Ä']}\n"
                f"   –û–ø–∏—Å–∞–Ω–∏–µ: {p['–û–ø–∏—Å–∞–Ω–∏–µ']}\n"
            )

        text.insert(tk.END, "\n".join(info))
        text.configure(state=tk.DISABLED)

    def toggle_theme(self):
        if self.root.cget("bg") == "#f4f4f4":
            self.root.configure(bg="#2d2d2d")
            self.entry.configure(bg="#3d3d3d", fg="white")
            self.path_label.configure(bg="#2d2d2d", fg="white")
            self.result_label.configure(bg="#2d2d2d", fg="white")
            self.title_label.configure(bg="#2d2d2d", fg="white")
        else:
            self.root.configure(bg="#f4f4f4")
            self.entry.configure(bg="white", fg="black")
            self.path_label.configure(bg="#f4f4f4", fg="black")
            self.result_label.configure(bg="#f4f4f4", fg="black")
            self.title_label.configure(bg="#f4f4f4", fg="#333")

    def highlight_errors(self):
        text = self.entry.get("1.0", tk.END).strip()
        self.entry.tag_remove("misspelled", "1.0", tk.END)

        words = [(m.group(), m.start(), m.end())
                 for m in re.finditer(r'\b\w+\b', text)]

        for word, start, end in words:
            if word and word in self.spell.unknown([word]):
                self.entry.tag_add(
                    "misspelled", f"1.0+{start}c", f"1.0+{end}c")

    def get_word_under_cursor(self, event):
        index = self.entry.index(tk.CURRENT)
        text = self.entry.get("1.0", tk.END).strip()
        if not text:
            return None, None, None
        cursor_pos = int(index.split(".")[1])
        words = [(m.group(), m.start(), m.end())
                 for m in re.finditer(r'\b\w+\b', text)]
        for word, start, end in words:
            if start <= cursor_pos < end:
                return word, start, end
        return None, None, None

    def show_suggestions(self, event):
        self.context_menu = tk.Menu(self.root, tearoff=0)
        word, word_start, word_end = self.get_word_under_cursor(event)

        if word and word in self.spell.unknown([word]):
            suggestions = self.spell.candidates(word)
            if suggestions:
                sorted_suggestions = sorted(suggestions)
                for suggestion in sorted_suggestions:
                    self.context_menu.add_command(label=suggestion, command=partial(
                        self.replace_word, word_start, word_end, suggestion))
                self.context_menu.add_separator()
            self.context_menu.add_command(
                label="–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å", command=lambda: self.add_word_and_update(word))
            self.highlight_errors()
            self.context_menu.post(event.x_root, event.y_root)
        elif word and word in self.dictionary.words:
            self.context_menu.add_command(
                label="–£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ª–æ–≤–∞—Ä—è", command=lambda: self.remove_word_and_update(word))
            self.context_menu.post(event.x_root, event.y_root)

    def add_word_and_update(self, word):
        if not word:
            self.update_result("–ù–µ—Ç —Å–ª–æ–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!", "orange")
            return

        if self.dictionary.add(word):
            self.update_result(f"–°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å", "green")
            self.highlight_errors()
        else:
            self.update_result(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ '{word}'", "red")

    def remove_word_and_update(self, word):
        if not word:
            self.update_result("–ù–µ—Ç —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", "orange")
            return

        confirm = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                      f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ '{word}' –∏–∑ —Å–ª–æ–≤–∞—Ä—è?")
        if confirm:
            if self.dictionary.remove(word):
                self.update_result(f"–°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è", "green")
                self.highlight_errors()
                self.check_spelling()
            else:
                self.update_result(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ '{word}'", "red")

    def replace_word(self, start, end, replacement):
        self.entry.delete(f"1.0+{start}c", f"1.0+{end}c")
        self.entry.insert(f"1.0+{start}c", replacement)
        self.highlight_errors()

    def paste_text(self, event=None):
        try:
            text = self.root.clipboard_get()
            self.entry.insert(tk.INSERT, text)
            self.highlight_errors()
            self.update_result("–¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω", "blue")
        except tk.TclError:
            self.update_result("–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç!", "orange")
        return "break"

    def clear_text(self, event=None):
        self.entry.delete("1.0", tk.END)
        self.update_result("–¢–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω", "blue")
        return "break"

    def copy_text(self, event=None):
        try:
            selected_text = self.entry.get(tk.SEL_FIRST, tk.SEL_LAST)
        except tk.TclError:
            selected_text = self.entry.get("1.0", tk.END).strip()

        if selected_text:
            self.root.clipboard_clear()
            self.root.clipboard_append(selected_text)
            self.root.update()
            self.update_result("–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!", "blue")
        else:
            self.update_result("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è!", "orange")
        return "break"

    def cut_text(self, event=None):
        try:
            selected_text = self.entry.get(tk.SEL_FIRST, tk.SEL_LAST)
            self.root.clipboard_clear()
            self.root.clipboard_append(selected_text)
            self.entry.delete(tk.SEL_FIRST, tk.SEL_LAST)
            self.root.update()
            self.update_result("–¢–µ–∫—Å—Ç –≤—ã—Ä–µ–∑–∞–Ω!", "blue")
        except tk.TclError:
            self.update_result("–ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!", "orange")
        return "break"

    def select_all(self, event=None):
        self.entry.tag_add(tk.SEL, "1.0", tk.END)
        self.update_result("–í–µ—Å—å —Ç–µ–∫—Å—Ç –≤—ã–¥–µ–ª–µ–Ω", "blue")
        return "break"

    def log_hotkey(self, hotkey_name):
        logging.info(f"–ù–∞–∂–∞—Ç–∞ –≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞: {hotkey_name}")
        print(f"üîë –ù–∞–∂–∞—Ç–∞ –≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞: {hotkey_name}")

    def show_dictionary(self, event=None):
        dict_window = tk.Toplevel(self.root)
        dict_window.title("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å")
        dict_window.geometry("400x450")
        self.log_hotkey("Ctrl+D (–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å)")

        path_label = tk.Label(dict_window, text=f"–§–∞–π–ª: {CUSTOM_DICTIONARY_FILE}",
                              font=("Arial", 9), anchor="w")
        path_label.pack(pady=(5, 0), padx=10, fill=tk.X)

        search_frame = tk.Frame(dict_window)
        search_frame.pack(pady=(5, 0), padx=10, fill=tk.X)

        tk.Label(search_frame, text="–ü–æ–∏—Å–∫:").pack(side=tk.LEFT)
        search_entry = tk.Entry(search_frame)
        search_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)

        words_frame = tk.Frame(dict_window)
        words_frame.pack(pady=10, padx=10, fill=tk.BOTH, expand=True)

        scrollbar = tk.Scrollbar(words_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        listbox = tk.Listbox(words_frame, height=15, width=50, font=("Arial", 12), yscrollcommand=scrollbar.set, selectmode=tk.SINGLE)
        listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.config(command=listbox.yview)

        words = sorted(self.dictionary.words)
        for word in words:
            listbox.insert(tk.END, word)

        def filter_words(event=None):
            search_text = search_entry.get().lower()
            listbox.delete(0, tk.END)
            for word in sorted(self.dictionary.words):
                if search_text in word.lower():
                    listbox.insert(tk.END, word)

        search_entry.bind("<KeyRelease>", filter_words)

        def remove_selected_word():
            selected_indices = listbox.curselection()
            if not selected_indices:
                messagebox.showinfo(
                    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return

            selected_word = listbox.get(selected_indices[0])
            confirm = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                          f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ '{selected_word}'?")
            if confirm:
                if self.dictionary.remove(selected_word):
                    filter_words()
                    self.highlight_errors()
                    self.update_result(
                    self.check_spelling()
                        f"–°–ª–æ–≤–æ '{selected_word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è", "green")

        button_frame = tk.Frame(dict_window)
        button_frame.pack(pady=5, fill=tk.X)

        ttk.Button(button_frame, text="–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ",
                   command=remove_selected_word).pack(side=tk.LEFT, padx=5)

        def save_changes():
            all_words = [listbox.get(i) for i in range(listbox.size())]
            self.dictionary.words = set(all_words)
            if self.dictionary.save():
                self.dictionary.refresh_spellchecker()
                self.update_result("–°–ª–æ–≤–∞—Ä—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", "green")
                dict_window.destroy()
                self.highlight_errors()
            else:
                self.update_result("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è!", "red")

        ttk.Button(button_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                   command=save_changes).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞",
                   command=dict_window.destroy).pack(side=tk.RIGHT, padx=5)

        def choose_file_from_dialog():
            global CUSTOM_DICTIONARY_FILE
            file_path = filedialog.asksaveasfilename(
                defaultextension=".txt",
                filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt")],
                title="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞—Ä—è",
                initialfile="Personal_Dictionary.txt"
            )
            if file_path:
                CUSTOM_DICTIONARY_FILE = file_path
                self.dictionary.save()
                path_label.config(text=f"–§–∞–π–ª: {CUSTOM_DICTIONARY_FILE}")
                self.update_result(
                    f"–°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–º–µ—â–µ–Ω: {CUSTOM_DICTIONARY_FILE}", "green")

        ttk.Button(button_frame, text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                   command=choose_file_from_dialog).pack(side=tk.LEFT, padx=5)

        context_menu = tk.Menu(listbox, tearoff=0)
        context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å", command=remove_selected_word)

        def show_context_menu(event):
            if listbox.size() > 0:
                listbox.selection_clear(0, tk.END)
                listbox.selection_set(listbox.nearest(event.y))
                context_menu.post(event.x_root, event.y_root)

        listbox.bind("<Button-3>", show_context_menu)

        def show_suggestions(self, event):
            self.context_menu = tk.Menu(self.root, tearoff=0)
            word, word_start, word_end = self.get_word_under_cursor(event)

            if word:
                if word in self.spell.unknown([word]):
                    suggestions = self.spell.candidates(word)
                    if suggestions:
                        sorted_suggestions = sorted(suggestions)
                        for suggestion in sorted_suggestions:
                            self.context_menu.add_command(label=suggestion, command=partial(
                                self.replace_word, word_start, word_end, suggestion))
                        self.context_menu.add_separator()
                    self.context_menu.add_command(
                        label="–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å", command=lambda: self.add_word_and_update(word))
                else:
                    if word in self.dictionary.words:
                        self.context_menu.add_command(
                            label="–£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ª–æ–≤–∞—Ä—è", command=lambda: self.remove_word_and_update(word))

                self.highlight_errors()
                self.context_menu.post(event.x_root, event.y_root)

    def remove_word_and_update(self, word):
        if not word:
            self.update_result("–ù–µ—Ç —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", "orange")
            return

        confirm = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                      f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ '{word}' –∏–∑ —Å–ª–æ–≤–∞—Ä—è?")
        if confirm:
            if self.dictionary.remove(word):
                self.update_result(
                    f"–°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è", "green")
                self.highlight_errors()
                self.check_spelling()
            else:
                self.update_result(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ '{word}'", "red")

        def save_changes():
            content = text_widget.get("1.0", tk.END).strip()
            new_words = {word.strip().lower()
                         for word in content.split("\n") if word.strip()}
            self.dictionary.words = new_words
            if self.dictionary.save():
                self.dictionary.refresh_spellchecker()
                self.update_result("–°–ª–æ–≤–∞—Ä—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", "green")
                dict_window.destroy()
                self.highlight_errors()
            else:
                self.update_result("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è!", "red")

        ttk.Button(button_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                   command=save_changes).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞",
                   command=dict_window.destroy).pack(side=tk.RIGHT, padx=5)

        def choose_file_from_dialog():
            global CUSTOM_DICTIONARY_FILE
            file_path = filedialog.asksaveasfilename(
                defaultextension=".txt",
                filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt")],
                title="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞—Ä—è",
                initialfile="Personal_Dictionary.txt"
            )
            if file_path:
                CUSTOM_DICTIONARY_FILE = file_path
                self.dictionary.save()
                path_label.config(text=f"–§–∞–π–ª: {CUSTOM_DICTIONARY_FILE}")
                self.update_result(
                    f"–°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–º–µ—â–µ–Ω: {CUSTOM_DICTIONARY_FILE}", "green")

        ttk.Button(button_frame, text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                   command=choose_file_from_dialog).pack(side=tk.LEFT, padx=5)

    def save_dictionary(self, event=None):
        if self.dictionary.save():
            self.update_result("–°–ª–æ–≤–∞—Ä—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", "green")
        else:
            self.update_result("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è!", "red")
        return "break"

    def choose_dictionary_file(self):
        global CUSTOM_DICTIONARY_FILE
        file_path = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt")],
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞—Ä—è",
            initialfile="Personal_Dictionary.txt"
        )
        if file_path:
            CUSTOM_DICTIONARY_FILE = file_path
            self.dictionary.save()
            self.path_label.config(
                text=f"–§–∞–π–ª —Å–ª–æ–≤–∞—Ä—è: {CUSTOM_DICTIONARY_FILE}")
            self.update_result(
                f"–ù–æ–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è: {CUSTOM_DICTIONARY_FILE}", "green")

    def setup_ui(self):
        self.title_label = tk.Label(self.root, text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏",
                                    font=("Arial", 16, "bold"),
                                    bg=self.root.cget("bg"),
                                    fg="#333")
        self.title_label.pack(pady=10)

        self.path_label = tk.Label(self.root,
                                   text=f"–§–∞–π–ª —Å–ª–æ–≤–∞—Ä—è: {CUSTOM_DICTIONARY_FILE}",
                                   font=("Arial", 9),
                                   anchor="w",
                                   bg=self.root.cget("bg"))
        self.path_label.pack(pady=(0, 5), padx=10, fill=tk.X)

        self.entry = scrolledtext.ScrolledText(self.root,
                                               height=10,
                                               width=70,
                                               font=("Arial", 12),
                                               wrap="word",
                                               bg="white",
                                               fg="black")
        self.entry.pack(pady=5, padx=10, fill=tk.BOTH, expand=True)
        self.entry.tag_configure(
            "misspelled", foreground="red", underline=True)
        self.entry.bind("<KeyRelease>", self.on_key_release)
        self.entry.bind("<Button-3>", self.show_suggestions)
        self.entry.bind("<space>", lambda event: self.highlight_errors())
        self.result_label = tk.Label(self.root,
                                     text="",
                                     font=("Arial", 12, "bold"),
                                     bg=self.root.cget("bg"))
        self.result_label.pack(pady=10)

        self.entry.bind("<KeyRelease>", lambda e: [self.highlight_errors(),
                                                   self.check_punctuation()])
        self.status_bar = tk.Label(self.root,
                                   text="–ì–æ—Ç–æ–≤–æ",
                                   bd=1,
                                   relief=tk.SUNKEN,
                                   anchor=tk.W)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)

        history_frame = tk.Frame(self.root)
        history_frame.pack(pady=5)

        ttk.Button(history_frame,
                   text="–û—Ç–º–µ–Ω–∏—Ç—å (Ctrl+Z)",
                   command=self.undo).pack(side=tk.LEFT)
        ttk.Button(history_frame,
                   text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å (Ctrl+Y)",
                   command=self.redo).pack(side=tk.LEFT)
        button_frame = tk.Frame(self.root, bg="#f4f4f4")
        button_frame.pack(pady=10)

        ttk.Button(button_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", command=self.check_spelling).pack(
            side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_text).pack(
            side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="–°–ª–æ–≤–∞—Ä—å", command=self.show_dictionary).pack(
            side=tk.LEFT, padx=5)
            
        github_btn = ttk.Button(
            button_frame,
            text="GitHub",
            command=lambda: self.open_github()
        )
        github_btn.pack(side=tk.RIGHT, padx=5)

    def open_github(self):
        try:
            import webbrowser
            webbrowser.open("https://github.com/Nikita-Postnov")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É: {str(e)}")

    def on_key_release(self, event):
        self.highlight_errors()
        self.check_punctuation()

    def update_result(self, message, color):
        self.result_label.config(text=message, foreground=color)

    def create_handler(self, func):
        def handler(event):
            sig = inspect.signature(func)
            if len(sig.parameters) > 0:
                return func(event)
            else:
                func()
                return "break"
        return handler


def check_system_info():
    print(f"üñ•Ô∏è –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {sys.platform}")
    print(f"üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–ª–æ–≤–∞—Ä—è: {CUSTOM_DICTIONARY_FILE}")
    print(f"üìÇ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {BASE_DIR}")
    print(f"üìÇ –ü–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤: {LOG_DIR}")
    print(f"üìÇ –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(
        f"‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å–ª–æ–≤–∞—Ä—è: {os.path.exists(CUSTOM_DICTIONARY_FILE)}")
    print(f"‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ –ª–æ–≥–æ–≤: {os.path.exists(LOG_DIR)}")
    print(f"üìù –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.access(BASE_DIR, os.W_OK)}")
    print(
        f"üìù –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫–µ –ª–æ–≥–æ–≤: {os.access(LOG_DIR, os.W_OK) if os.path.exists(LOG_DIR) else '–ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}")

    try:
        test_file = os.path.join(BASE_DIR, "test_write.tmp")
        with open(test_file, "w") as f:
            f.write("test")
        os.remove(test_file)
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —É—Å–ø–µ—à–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–∏—Å–∏: {str(e)}")


if __name__ == "__main__":
    check_system_info()

    logging.info("--- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ ---")

    root = tk.Tk()
    app = SpellCheckerApp(root)
    root.mainloop()

    logging.info("--- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ ---")